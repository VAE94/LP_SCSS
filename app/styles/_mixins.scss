// Mixins
@mixin sm {
  @media (min-width: #{$sm}) {
    @content;
  }
}
@mixin md {
  @media (min-width: #{$md}) {
    @content;
  }
}
@mixin lg {
  @media (min-width: #{$lg}) {
    @content;
  }
}
@mixin xl {
  @media (min-width: #{$xl}) {
    @content;
  }
}
@mixin xxl {
  @media (min-width: #{$xxl}) {
    @content;
  }
}
@mixin media-min($media-value) {
  @media (min-width: #{$media-value}px) {
    @content;
  }
}
@mixin media-max($media-value) {
  @media (max-width: #{$media-value}px) {
    @content;
  }
}

// FLEXBOX
@mixin f($vertical, $horizontal) {
  align-items: $vertical;
  justify-content: $horizontal;
}
@mixin grid($flex) {
  @if $flex {
    display: flex;
  } @else {
    display: block;
  }
}
@mixin df($value) {
  flex: #{$value};
}
@mixin fw($value) {
  flex-wrap: #{$value};
}
@mixin fd($value) {
  flex-direction: #{$value};
}
@mixin fjc($value) {
  justify-content: #{$value};
}
@mixin fai($value) {
  align-items: #{$value};
}
@mixin fac($value) {
  align-content: #{$value};
}
@mixin fo($value) {
  order: #{$value};
}
@mixin fg($value) {
  flex-grow: #{$value};
}
@mixin fs($value) {
  flex-shrink: #{$value};
}
@mixin fbasis($value) {
  flex-basis: #{$value};
}
@mixin fself($value) {
  align-self: #{$value};
}
@mixin flex($vertical, $horizontal) {
  display: flex;
  align-items: $vertical;
  justify-content: $horizontal;
}

// OTHERS
@mixin font($color, $font-family, $font-size, $letter-spacing, $font-weight:400, $line-height:normal, $text-transform:none) {
  color: $color;
  font-family: $font-family;
  font-size: $font-size;
  font-weight: $font-weight;
  line-height: $line-height;
  @if $letter-spacing {
    letter-spacing: calc(#{$letter-spacing} * #{$font-size} / 1000);
  } @else {
    letter-spacing: 0;
  }
  text-transform: $text-transform;
}
@mixin letter-spacing($font-size, $letter-spacing) {
  letter-spacing: calc(#{$letter-spacing} * #{$font-size} / 1000);
}


@mixin fontSizeMobile($font-size) {
  font-size: calc(100vw * (#{$font-size} / 320));
}
@mixin fontSizeDesktop($font-size) {
  font-size: calc(100vw * (#{$font-size} / 1920));
}

@function sizeMobile($value) {
  @return calc(100vw * (#{$value} / 320));
}
@function sizeDesktop($value) {
  @return calc(100vw * (#{$value} / 1920));
}


// e.g.
// $min_width: 320px;
// $max_width: 1200px;
// $min_font: 16px;
// $max_font: 24px;
// @include fluid-type($min_width, $max_width, $min_font, $max_font);

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size, $min-line-height:$min-font-size, $max-line-height:$max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);
  $u5: unit($min-line-height);
  $u6: unit($max-line-height);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;
      line-height: $min-line-height;
      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
        line-height: calc(#{$min-line-height} + #{strip-unit($max-line-height - $min-line-height)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
        line-height: $max-line-height;
      }
    }
  }
}

@mixin position($type, $position:static) {
  position: $position;
  @if $type == full {
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  } @else if $type == center {
    top: 50%;
    left: 50%;
    transform: translate(-50%,-50%);
  } @else {
    top: 0;
    left: 0;
  }
}

@mixin vertical-align($position: relative) {
  position: $position;
  top: 50%;
  transform: translateY(-50%);
}

@mixin list_h($value) {
  li {
    float: left;
    margin-left: ($value);
    &:first-child {
      margin: 0;
    }
  }
}
@mixin list_v($value) {
  li {
    float: none;
    margin-top: ($value);
    margin-left: 0;
    &:first-child{
      margin: 0;
    }
  }
}

@mixin lr-childs {
  &:first-child {
    margin-left: 0;
    padding-left: 0;
  }
  &:last-child {
    margin-right: 0;
    padding-right: 0;
  }
}
@mixin tb-childs {
  &:first-child {
    margin-top: 0;
    padding-top: 0;
  }
  &:last-child {
    margin-bottom: 0;
    padding-bottom: 0;
  }
}

@mixin border($width, $style, $color) {
  border-width: $width;
  border-style: $style;
  border-color: $color;
}

@mixin background($size, $position, $repeat) {
  background-size: $size;
  background-position: $position;
  background-repeat: $repeat;
}

@mixin padding($values...) {
  @each $var in $values {
    padding: #{$var};
  }
}
@mixin margin($values...) {
  @each $var in $values {
    margin: #{$var};
  }
}

@mixin hover($time:.3, $effect:ease) {
  &:hover,&:active,&:focus {
    @content;
    transition: all #{$time}s $effect;
  }
}

@mixin ondevice($device, $type) {
  @if $device == mobile {
    display: $type;
    @media (min-width: 992px) {
      display: none;
    }
  } @else if $device == tablet {
    display: $type;
    @media (min-width: 1200px) {
      display: none;
    }
  } @else {
    display: none;
    @media (min-width: 1200px) {
      display: $type;
    }
  }
}
@mixin indevice($deviceFirst,$minWidth,$maxWidth,$type) {
  @if $deviceFirst == mobile {
    @media (min-width: #{$minWidth}) {
      display: $type;
    }
    @media (min-width: #{$maxWidth}) {
      display: none;
    }
  } @else {
    @media (max-width: #{$minWidth}) {
      display: none;
    }
    @media (min-width: #{$maxWidth}) {
      display: $type;
    }
  }
}